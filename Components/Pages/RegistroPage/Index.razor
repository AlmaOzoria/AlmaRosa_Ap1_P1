@page "/Registro/Index/"
@rendermode InteractiveServer
@inject PrestamoServices prestamoService
@inject NavigationManager navigation

<EditForm Model="ListaPrestamo" class="border shadow-lg p-3 rounded">
    <div class="card-header bg-primary text-white text-center py-2 rounded">
        <h3 style="font-weight: bold;" class="mb-0 font-weight-bold">Consulta Prestamo</h3>
    </div>
    <div class="card-body">
        <div class="row mb-3 align-items-end">
            
            <div class="col-md-3">
                <label for="Filtro" class="form-label">Filtrar por:</label>
                <select @bind="filtro" class="form-select">
                    <option value="id">ID</option>
                    <option value="Deudor">Deudor</option>
                    <option value="concepto">Concepto</option>
                    <option value="Monto">Monto</option>
                </select>
            </div>

            <div class="col-md-6">
                <label for="ValorFiltro" class="form-label">Búsqueda:</label>
                <div class="input-group">
                    <input @bind="valorFiltro" class="form-control" placeholder="Buscar" />
                    <button @onclick="Buscar" class="btn btn-outline-primary" type="button">
                        <span class="bi bi-search"></span> Buscar
                    </button>
                </div>
            </div>
            
            <div class="col-md-3 text-end">
                <a href="/Prestamo/Create" class="btn btn-success" type="button"><span class="bi bi-plus-square mt-3"></span> Crear </a>
            </div>
        </div>
    </div>

    
    <table class="table table-bordered text-center">
        <thead class="bg-primary text-white">
            <tr>
                <th>PrestamoId</th>
                <th>Deudor</th>
                <th>Concepto</th>
                <th>Monto</th>
                <th>Ver</th>
                <th>Editar</th>
                <th>Eliminar</th>
            </tr>
        </thead>

        <tbody>
            @foreach (var prestamo in ListaPrestamo)
            {
                <tr>
                    <td>@prestamo.PrestamoId</td>
                    <td>@prestamo.Deudor</td>
                    <td>@prestamo.Concepto</td>
                    <td>@prestamo.Monto</td>

                    <td>

                        
                        <a href="/Prestamo/Details/@prestamo.PrestamoId" style="border: none; background-color: transparent;" class="btn-detalle">
                            <i class="bi bi-eye" style="font-size: 2rem;"></i>
                        </a>

                    </td>
                    <td>
                        
                        <a href="/Prestamo/Edit/@prestamo.PrestamoId" style="border: none; background-color: transparent;" class="btn-editar">
                            <span class="btn bi bi-pencil-square" style="font-size: 2rem;"></span>
                        </a>
                    </td>

                    <td>
                        
                        <a href="/Prestamo/Delete/@prestamo.PrestamoId" style="border: none; background-color: transparent;" class="btn-eliminar">
                            <i class="btn bi bi-trash" style="font-size: 2rem;"></i>
                        </a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <div class="card-footer text-start">
        <p> Total de  Prestamo: @ListaPrestamo.Count</p>
    </div>
</EditForm>

@code {
    public Prestamo prestamo { get; set; } = new Prestamo();
    public List<Prestamo> ListaPrestamo = new List<Prestamo>();
    private string valorFiltro = "";
    private string filtro = "Id";

    protected override async Task OnInitializedAsync()
    {
        ListaPrestamo = await prestamoService.Listar(p => true);
    }

    public async Task Buscar()
    {
        if (!string.IsNullOrWhiteSpace(valorFiltro))
        {
            if (filtro == "id" && int.TryParse(valorFiltro, out int PrestamoId))
            {
                ListaPrestamo = await prestamoService.Listar(p => p.PrestamoId == PrestamoId);
            }
            else if (filtro == "deudor")
            {
                string filtroMinuscula = valorFiltro.ToLower();
                ListaPrestamo = await prestamoService.Listar(p => p.Deudor.ToLower().Contains(filtroMinuscula));

            }
            else if (filtro == "concepto")
            {
                string filtroMinuscula = valorFiltro.ToLower();
                ListaPrestamo = await prestamoService.Listar(p => p.Concepto.ToLower().Contains(filtroMinuscula));
            }
            else if (filtro == "monto" && decimal.TryParse(valorFiltro, out decimal Monto))
            {
                ListaPrestamo = await prestamoService.Listar(p => p.Monto == Monto);
            }
            else
            {
                ListaPrestamo = await prestamoService.Listar(p => true);
            }
        }
    }
}